{"version":3,"sources":["file:///C:/Users/wyh/Desktop/Cocos/assets/Missions/test02/test02.ts"],"names":["_decorator","Component","geometry","input","Input","Camera","PhysicsSystem","ccclass","property","test02","start","on","EventType","MOUSE_DOWN","OnMouseDown","event","outRay","Ray","sampleRay","camera","screenPointToRay","getLocationX","getLocationY","instance","raycastClosest","raycastClosestResult","hitPoint","node","setPosition"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,Q,OAAAA,Q;AAAUC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,K,OAAAA,K;AAAMC,MAAAA,M,OAAAA,M;AAAmBC,MAAAA,a,OAAAA,a;;;;;;;;;OACpE;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBR,U;;wBAGjBS,M,WADZF,OAAO,CAAC,QAAD,C,UAEHC,QAAQ,CAACH,MAAD,C,2BAFb,MACaI,MADb,SAC4BR,SAD5B,CACsC;AAAA;AAAA;;AAAA;AAAA;;AAIlCS,QAAAA,KAAK,GAAG;AACJ;AACAP,UAAAA,KAAK,CAACQ,EAAN,CAASP,KAAK,CAACQ,SAAN,CAAgBC,UAAzB,EAAoC,KAAKC,WAAzC,EAAqD,IAArD;AACH;;AAEDA,QAAAA,WAAW,CAACC,KAAD,EAAkB;AACzB;AACA,cAAIC,MAAM,GAAG,IAAId,QAAQ,CAACe,GAAb,EAAb;AACA,cAAIC,SAAS,GAAG,KAAKC,MAAL,CAAYC,gBAAZ,CAA6BL,KAAK,CAACM,YAAN,EAA7B,EAAkDN,KAAK,CAACO,YAAN,EAAlD,EAAuEN,MAAvE,CAAhB,CAHyB,CAKzB;;AACA,cAAGV,aAAa,CAACiB,QAAd,CAAuBC,cAAvB,CAAsCN,SAAtC,CAAH,EAAoD;AAChD,kBAAMO,oBAAoB,GAAGnB,aAAa,CAACiB,QAAd,CAAuBE,oBAApD;AACA,kBAAMC,QAAQ,GAAGD,oBAAoB,CAACC,QAAtC,CAFgD,CAED;;AAC/C,iBAAKC,IAAL,CAAUC,WAAV,CAAsBF,QAAtB,EAHgD,CAGhB;AACnC;AACJ;;AApBiC,O","sourcesContent":["import { _decorator, Component, geometry, input, Input,Camera,EventMouse, PhysicsSystem, } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('test02')\r\nexport class test02 extends Component {\r\n    @property(Camera)\r\n    camera:Camera\r\n\r\n    start() {\r\n        // 添加鼠标的监听事件，在按下时触发OnMouseDown方法\r\n        input.on(Input.EventType.MOUSE_DOWN,this.OnMouseDown,this)\r\n    }\r\n   \r\n    OnMouseDown(event:EventMouse){\r\n        //通过监听鼠标按下的输入事件，实现将鼠标坐标转换成射线\r\n        var outRay = new geometry.Ray() \r\n        var sampleRay = this.camera.screenPointToRay(event.getLocationX(),event.getLocationY(),outRay)\r\n    \r\n        // 检查射线检测的结果\r\n        if(PhysicsSystem.instance.raycastClosest(sampleRay)){\r\n            const raycastClosestResult = PhysicsSystem.instance.raycastClosestResult;\r\n            const hitPoint = raycastClosestResult.hitPoint // 获取击中点（世界坐标）\r\n            this.node.setPosition(hitPoint) // 修改物体位置\r\n        }\r\n    }\r\n}\r\n\r\n\r\n"]}